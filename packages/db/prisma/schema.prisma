// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models with improvements
model User {
  id                      String     @id @default(uuid())
  username                String     @unique
  password                String
  email                   String?    @unique
  isverified              Boolean    @default(false)
  verifiedCode            Int?
  verifiedCodeExpireTime  DateTime?
  
  // Added relations
  playerOneTeams          Team[]     @relation("PlayerOneTeams")
  playerTwoTeams          Team[]     @relation("PlayerTwoTeams")
  leaderboards            LeaderBoard[] @relation("UserLeaderBoards")
  socialLinks             SocialLink[]  @relation("UserSocialLinks")
  submittedSolutions      Solution[]  @relation("UserSolutions")
  
  // Additional useful fields
  createdAt               DateTime   @default(now())
  lastActive              DateTime   @default(now())
  preferredLanguages      String[]   // ['javascript', 'python', etc.]
}

model SocialLink {
  id       String   @id @default(uuid())
  platform String
  url      String
  user     User     @relation("UserSocialLinks", fields: [userId], references: [id])
  userId   String
  
  @@unique([userId, platform]) // Better unique constraint
}

model QuestionBank {
  id              String   @id @default(uuid())
  title           String   @unique
  description     String   @db.Text // For longer content
  difficulty      String
  solution        String   @db.Text
  conceptLink     String
  tags            String[]
  createdAt       DateTime @default(now())
  
  // Added fields
  testCases       Json     // Store test cases as JSON
  expectedTimeComplexity String
  expectedSpaceComplexity String
  hints           String[] // Progressive hints
  
  // Relations
  matches         Match[]  // Questions used in matches
}

model LeaderBoard {
  id         String   @id @default(uuid())
  rank       String?
  badge      String?
  winCount   Int      @default(0)
  lossCount  Int      @default(0)
  aiLifeline String?
  graph      String?  // Consider using JSON type
  
  // Relations
  user       User     @relation("UserLeaderBoards", fields: [userId], references: [id])
  userId     String
  
  // Added fields
  totalMatches      Int  @default(0)
  averageSolveTime  Float? // In seconds
  fastestSolve      Float? // In seconds
  rating            Int  @default(1000) // ELO-style rating
}

// New models
model Team {
  id          String   @id @default(uuid())
  name        String?
  joinCode    String?  @unique
  isPrivate   Boolean  @default(true)
  createdAt   DateTime @default(now())
  expireAt    DateTime? // For temporary teams
  
  // Relations
  playerOneId String
  playerOne   User     @relation("PlayerOneTeams", fields: [playerOneId], references: [id])
  playerTwoId String?
  playerTwo   User?    @relation("PlayerTwoTeams", fields: [playerTwoId], references: [id])
  matches     Match[]
}

model Match {
  id            String   @id @default(uuid())
  startTime     DateTime @default(now())
  endTime       DateTime?
  status        String   @default("WAITING") // WAITING, ACTIVE, COMPLETED, ABANDONED
  
  // Relations
  teamId        String
  team          Team     @relation(fields: [teamId], references: [id])
  questionId    String
  question      QuestionBank @relation(fields: [questionId], references: [id])
  solutions     Solution[]
  
  // Results
  winnerId      String?  // User ID of winner
  winReason     String?  // Time, space, correctness, etc.
}

model Solution {
  id            String   @id @default(uuid())
  code          String   @db.Text
  language      String
  submittedAt   DateTime @default(now())
  executionTime Float?   // In milliseconds
  memoryUsed    Float?   // In MB
  passedTests   Int      @default(0)
  totalTests    Int      @default(0)
  hintsUsed     Int      @default(0)
  
  // Relations
  matchId       String
  match         Match    @relation(fields: [matchId], references: [id])
  userId        String
  user          User     @relation("UserSolutions", fields: [userId], references: [id])
  
  // Analysis
  timeComplexity String?
  spaceComplexity String?
}