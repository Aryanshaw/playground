// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String     @id @default(uuid())
  username                String     @unique
  password                String
  email                   String?    @unique
  isverified              Boolean    @default(false)
  verifiedCode            Int?
  verifiedCodeExpireTime  DateTime?
  
  playerOneTeams          Team[]     @relation("PlayerOneTeams")
  playerTwoTeams          Team[]     @relation("PlayerTwoTeams")
  leaderboards            LeaderBoard[] @relation("UserLeaderBoards")
  socialLinks             SocialLink[]  @relation("UserSocialLinks")
  submittedSolutions      Solution[]  @relation("UserSolutions")
  
  createdAt               DateTime   @default(now())
  lastActive              DateTime   @default(now())
  preferredLanguages      Language[]  // Changed to array for multiple languages
  tags                    Tags[]      // Changed to array for multiple tags
  status                  UserStatus  @default(ACTIVE)
  
  @@map("users")
}

model SocialLink {
  id       String   @id @default(uuid())
  platform SocialPlatform
  url      String
  user     User     @relation("UserSocialLinks", fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  
  @@unique([userId, platform])
  @@map("social_links")
}

model QuestionBank {
  id              String   @id @default(uuid())
  title           String   @unique
  description     String   @db.Text
  difficulty      Difficulty
  solution        String   @db.Text
  concept_link     String
  tags            Tags[]
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  
  // Improved test case structure
  test_cases       Json     // Structure: {public: TestCase[], hidden: TestCase[]}
  expected_time_complexity String
  expected_space_complexity String
  hints           String[]
  
  // Additional fields
  is_active        Boolean  @default(true)
  author_id        String?  // Who created this question
  constraints     String?  // Input constraints
  examples        Json?    // Example inputs/outputs for display
  
  // Relations
  matches         Match[]
  
  @@map("question_bank")
}

model LeaderBoard {
  id         String   @id @default(uuid())
  rank       Int?     // Changed to Int for proper ranking
  badge      Badge?
  winCount   Int      @default(0)
  lossCount  Int      @default(0)
  aiLifeline Int      @default(3) // Number of AI hints available
  
  // Relations
  user       User     @relation("UserLeaderBoards", fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique // One leaderboard per user
  
  // Performance metrics
  totalMatches      Int     @default(0)
  averageSolveTime  Float?  // In seconds
  fastestSolve      Float?  // In seconds
  rating            Int     @default(1000) // ELO-style rating
  streak            Int     @default(0)    // Current win streak
  bestStreak        Int     @default(0)    // Best win streak
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("leaderboards")
}

model Team {
  id          String    @id @default(uuid())
  name        String?
  joinCode    String?   @unique
  isPrivate   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  expireAt    DateTime? // For temporary teams
  status      TeamStatus @default(WAITING)
  
  // Relations
  playerOneId String
  playerOne   User      @relation("PlayerOneTeams", fields: [playerOneId], references: [id])
  playerTwoId String?
  playerTwo   User?     @relation("PlayerTwoTeams", fields: [playerTwoId], references: [id])
  matches     Match[]
  
  @@map("teams")
}

model Match {
  id            String      @id @default(uuid())
  startTime     DateTime    @default(now())
  endTime       DateTime?
  status        MatchStatus @default(WAITING)
  
  // Relations
  teamId        String
  team          Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  questionId    String
  question      QuestionBank @relation(fields: [questionId], references: [id])
  solutions     Solution[]
  
  // Results
  winnerId      String?     // User ID of winner
  winReason     WinReason?  // Enum for win reasons
  loserId       String?     // Fixed typo: LosserId -> loserId
  lossReason    LossReason? // Enum for loss reasons
  
  // Match settings
  timeLimit     Int         @default(1800) // 30 minutes in seconds
  allowHints    Boolean     @default(true)
  
  @@map("matches")
}

model Solution {
  id            String   @id @default(uuid())
  code          String   @db.Text
  language      Language
  submittedAt   DateTime @default(now())
  
  // Execution metrics
  executionTime Float?   // In milliseconds
  memoryUsed    Float?   // In MB
  passedTests   Int      @default(0)
  totalTests    Int      @default(0)
  hintsUsed     Int      @default(0)
  isCorrect     Boolean  @default(false)
  
  // Relations
  matchId       String
  match         Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  userId        String
  user          User     @relation("UserSolutions", fields: [userId], references: [id])
  
  // Analysis
  timeComplexity  String?
  spaceComplexity String?
  testResults     Json?    // Detailed test case results
  
  @@map("solutions")
}

// Enums
enum Language {
  PYTHON
  JAVASCRIPT
  JAVA
  CPP
  C
  TYPESCRIPT
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Tags {
  BINARY_SEARCH
  ARRAY
  HASHING
  TWO_POINTERS
  SLIDING_WINDOW
  HEAP
  DYNAMIC_PROGRAMMING
  GREEDY
  BACKTRACKING
  TREE
  GRAPH
  LINKED_LIST
  STACK
  QUEUE
  STRING
  MATH
  BIT_MANIPULATION
  SORTING
  SEARCHING
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum SocialPlatform {
  GITHUB
  LINKEDIN
  TWITTER
  DISCORD
  WEBSITE
}

enum Badge {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  CHAMPION
}

enum TeamStatus {
  WAITING
  FULL
  IN_MATCH
  COMPLETED
}

enum MatchStatus {
  WAITING
  ACTIVE
  COMPLETED
  ABANDONED
  CANCELLED
}

enum WinReason {
  FASTER_SOLUTION
  CORRECT_SOLUTION
  BETTER_COMPLEXITY
  OPPONENT_TIMEOUT
  OPPONENT_DISCONNECT
}

enum LossReason {
  SLOWER_SOLUTION
  INCORRECT_SOLUTION
  WORSE_COMPLEXITY
  TIMEOUT
  DISCONNECTED
}